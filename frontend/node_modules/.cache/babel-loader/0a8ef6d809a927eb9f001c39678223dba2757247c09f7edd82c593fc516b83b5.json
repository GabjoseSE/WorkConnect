{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport parse from '../parse.js';\nimport { VALID_PHONE_NUMBER_WITH_EXTENSION } from '../helpers/isViablePhoneNumber.js';\nimport parsePreCandidate from '../findNumbers/parsePreCandidate.js';\nimport isValidPreCandidate from '../findNumbers/isValidPreCandidate.js';\nimport isValidCandidate from '../findNumbers/isValidCandidate.js';\nimport {\n// PLUS_CHARS,\nVALID_PUNCTUATION,\n// VALID_DIGITS,\nWHITESPACE } from '../constants.js';\nvar WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+');\nvar PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$');\n\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\nvar PhoneNumberSearch = /*#__PURE__*/function () {\n  function PhoneNumberSearch(text, options, metadata) {\n    _classCallCheck(this, PhoneNumberSearch);\n    this.text = text;\n    // If assigning the `{}` default value is moved to the arguments above,\n    // code coverage would decrease for some weird reason.\n    this.options = options || {};\n    this.metadata = metadata;\n\n    // Iteration tristate.\n    this.state = 'NOT_READY';\n    this.regexp = new RegExp(VALID_PHONE_NUMBER_WITH_EXTENSION, 'ig');\n  }\n  return _createClass(PhoneNumberSearch, [{\n    key: \"find\",\n    value: function find() {\n      var matches = this.regexp.exec(this.text);\n      if (!matches) {\n        return;\n      }\n      var number = matches[0];\n      var startsAt = matches.index;\n      number = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '');\n      startsAt += matches[0].length - number.length;\n      // Fixes not parsing numbers with whitespace in the end.\n      // Also fixes not parsing numbers with opening parentheses in the end.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/252\n      number = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '');\n      number = parsePreCandidate(number);\n      var result = this.parseCandidate(number, startsAt);\n      if (result) {\n        return result;\n      }\n\n      // Tail recursion.\n      // Try the next one if this one is not a valid phone number.\n      return this.find();\n    }\n  }, {\n    key: \"parseCandidate\",\n    value: function parseCandidate(number, startsAt) {\n      if (!isValidPreCandidate(number, startsAt, this.text)) {\n        return;\n      }\n\n      // Don't parse phone numbers which are non-phone numbers\n      // due to being part of something else (e.g. a UUID).\n      // https://github.com/catamphetamine/libphonenumber-js/issues/213\n      // Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\n      if (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\n        return;\n      }\n\n      // // Prepend any opening brackets left behind by the\n      // // `PHONE_NUMBER_START_PATTERN` regexp.\n      // const text_before_number = text.slice(this.searching_from, startsAt)\n      // const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\n      // if (full_number_starts_at >= 0) {\n      // \tnumber = text_before_number.slice(full_number_starts_at) + number\n      // \tstartsAt = full_number_starts_at\n      // }\n      //\n      // this.searching_from = matches.lastIndex\n\n      var result = parse(number, this.options, this.metadata);\n      if (!result.phone) {\n        return;\n      }\n      result.startsAt = startsAt;\n      result.endsAt = startsAt + number.length;\n      return result;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.last_match = this.find();\n        if (this.last_match) {\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      }\n      // Don't retain that memory any longer than necessary.\n      var result = this.last_match;\n      this.last_match = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n}();\nexport { PhoneNumberSearch as default };","map":{"version":3,"names":["parse","VALID_PHONE_NUMBER_WITH_EXTENSION","parsePreCandidate","isValidPreCandidate","isValidCandidate","VALID_PUNCTUATION","WHITESPACE","WHITESPACE_IN_THE_BEGINNING_PATTERN","RegExp","PUNCTUATION_IN_THE_END_PATTERN","PhoneNumberSearch","text","options","metadata","_classCallCheck","state","regexp","_createClass","key","value","find","matches","exec","number","startsAt","index","replace","length","result","parseCandidate","extended","phone","endsAt","hasNext","last_match","next","Error","default"],"sources":["C:\\Users\\Aery\\OneDrive\\Documents\\Coding Files\\WorkConnect\\frontend\\node_modules\\libphonenumber-js\\source\\legacy\\PhoneNumberSearch.js"],"sourcesContent":["import parse from '../parse.js'\r\nimport { VALID_PHONE_NUMBER_WITH_EXTENSION } from '../helpers/isViablePhoneNumber.js'\r\n\r\nimport parsePreCandidate from '../findNumbers/parsePreCandidate.js'\r\nimport isValidPreCandidate from '../findNumbers/isValidPreCandidate.js'\r\nimport isValidCandidate from '../findNumbers/isValidCandidate.js'\r\n\r\nimport {\r\n\t// PLUS_CHARS,\r\n\tVALID_PUNCTUATION,\r\n\t// VALID_DIGITS,\r\n\tWHITESPACE\r\n} from '../constants.js'\r\n\r\nconst WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+')\r\nconst PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$')\r\n\r\n/**\r\n * Extracts a parseable phone number including any opening brackets, etc.\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?startsAt, ?endsAt }`.\r\n */\r\nexport default class PhoneNumberSearch {\r\n\tconstructor(text, options, metadata) {\r\n\t\tthis.text = text\r\n\t\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t\t// code coverage would decrease for some weird reason.\r\n\t\tthis.options = options || {}\r\n\t\tthis.metadata = metadata\r\n\r\n\t\t// Iteration tristate.\r\n\t\tthis.state = 'NOT_READY'\r\n\r\n\t\tthis.regexp = new RegExp(VALID_PHONE_NUMBER_WITH_EXTENSION, 'ig')\r\n\t}\r\n\r\n\tfind() {\r\n\t\tconst matches = this.regexp.exec(this.text)\r\n\t\tif (!matches) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet number = matches[0]\r\n\t\tlet startsAt = matches.index\r\n\r\n\t\tnumber = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '')\r\n\t\tstartsAt += matches[0].length - number.length\r\n\t\t// Fixes not parsing numbers with whitespace in the end.\r\n\t\t// Also fixes not parsing numbers with opening parentheses in the end.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/252\r\n\t\tnumber = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '')\r\n\r\n\t\tnumber = parsePreCandidate(number)\r\n\r\n\t\tconst result = this.parseCandidate(number, startsAt)\r\n\t\tif (result) {\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\t// Tail recursion.\r\n\t\t// Try the next one if this one is not a valid phone number.\r\n\t\treturn this.find()\r\n\t}\r\n\r\n\tparseCandidate(number, startsAt) {\r\n\t\tif (!isValidPreCandidate(number, startsAt, this.text)) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Don't parse phone numbers which are non-phone numbers\r\n\t\t// due to being part of something else (e.g. a UUID).\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/213\r\n\t\t// Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).\r\n\t\tif (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// // Prepend any opening brackets left behind by the\r\n\t\t// // `PHONE_NUMBER_START_PATTERN` regexp.\r\n\t\t// const text_before_number = text.slice(this.searching_from, startsAt)\r\n\t\t// const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)\r\n\t\t// if (full_number_starts_at >= 0) {\r\n\t\t// \tnumber = text_before_number.slice(full_number_starts_at) + number\r\n\t\t// \tstartsAt = full_number_starts_at\r\n\t\t// }\r\n\t\t//\r\n\t\t// this.searching_from = matches.lastIndex\r\n\r\n\t\tconst result = parse(number, this.options, this.metadata)\r\n\t\tif (!result.phone) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tresult.startsAt = startsAt\r\n\t\tresult.endsAt = startsAt + number.length\r\n\t\treturn result\r\n\t}\r\n\r\n\thasNext() {\r\n\t\tif (this.state === 'NOT_READY') {\r\n\t\t\tthis.last_match = this.find()\r\n\t\t\tif (this.last_match) {\r\n\t\t\t\tthis.state = 'READY'\r\n\t\t\t} else {\r\n\t\t\t\tthis.state = 'DONE'\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.state === 'READY'\r\n\t}\r\n\r\n\tnext() {\r\n\t\t// Check the state and find the next match as a side-effect if necessary.\r\n\t\tif (!this.hasNext()) {\r\n\t\t\tthrow new Error('No next element')\r\n\t\t}\r\n\t\t// Don't retain that memory any longer than necessary.\r\n\t\tconst result = this.last_match\r\n\t\tthis.last_match = null\r\n\t\tthis.state = 'NOT_READY'\r\n\t\treturn result\r\n\t}\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}