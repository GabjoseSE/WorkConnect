{"ast":null,"code":"export async function validatePhone(countryCode, nationalNumber) {\n  // countryCode like +63, nationalNumber like 9123456789 or +639912345678\n  if (!nationalNumber) return {\n    valid: false\n  };\n  let candidate = String(nationalNumber || '').trim();\n  // handle leading 00 -> +\n  if (candidate.startsWith('00')) candidate = '+' + candidate.slice(2);\n\n  // build a full E.164 candidate\n  let full;\n  if (candidate.startsWith('+')) {\n    full = candidate;\n  } else {\n    // normalize country code digits\n    const cc = String(countryCode || '').trim();\n    const ccDigits = cc.replace(/\\D/g, '');\n    // strip non-digits from candidate and leading zeros\n    let digits = candidate.replace(/\\D/g, '');\n    digits = digits.replace(/^0+/, '');\n    if (ccDigits && digits.startsWith(ccDigits)) {\n      // user may have entered country code without +\n      full = '+' + digits;\n    } else {\n      full = (cc.startsWith('+') ? cc : ccDigits ? '+' + ccDigits : '+') + digits;\n    }\n  }\n  try {\n    const lib = await import('libphonenumber-js');\n    const {\n      parsePhoneNumberFromString\n    } = lib;\n    const parsed = parsePhoneNumberFromString(full);\n    if (!parsed) return {\n      valid: false\n    };\n    return {\n      valid: parsed.isValid(),\n      e164: parsed.number\n    };\n  } catch (err) {\n    // Fallback: simple digit-only length check (not as accurate)\n    const digits = (full || '').replace(/\\D/g, '');\n    if (digits.length < 7 || digits.length > 15) return {\n      valid: false\n    };\n    return {\n      valid: true,\n      e164: '+' + digits\n    };\n  }\n}\n\n// Named export only — avoids anonymous default export lint warnings","map":{"version":3,"names":["validatePhone","countryCode","nationalNumber","valid","candidate","String","trim","startsWith","slice","full","cc","ccDigits","replace","digits","lib","parsePhoneNumberFromString","parsed","isValid","e164","number","err","length"],"sources":["C:/Users/Aery/OneDrive/Documents/Coding Files/WorkConnect/frontend/src/utils/phone.js"],"sourcesContent":["export async function validatePhone(countryCode, nationalNumber) {\r\n  // countryCode like +63, nationalNumber like 9123456789 or +639912345678\r\n  if (!nationalNumber) return { valid: false };\r\n\r\n  let candidate = String(nationalNumber || '').trim();\r\n  // handle leading 00 -> +\r\n  if (candidate.startsWith('00')) candidate = '+' + candidate.slice(2);\r\n\r\n  // build a full E.164 candidate\r\n  let full;\r\n  if (candidate.startsWith('+')) {\r\n    full = candidate;\r\n  } else {\r\n    // normalize country code digits\r\n    const cc = String(countryCode || '').trim();\r\n    const ccDigits = cc.replace(/\\D/g, '');\r\n    // strip non-digits from candidate and leading zeros\r\n    let digits = candidate.replace(/\\D/g, '');\r\n    digits = digits.replace(/^0+/, '');\r\n\r\n    if (ccDigits && digits.startsWith(ccDigits)) {\r\n      // user may have entered country code without +\r\n      full = '+' + digits;\r\n    } else {\r\n      full = (cc.startsWith('+') ? cc : (ccDigits ? '+' + ccDigits : '+')) + digits;\r\n    }\r\n  }\r\n\r\n  try {\r\n    const lib = await import('libphonenumber-js');\r\n    const { parsePhoneNumberFromString } = lib;\r\n    const parsed = parsePhoneNumberFromString(full);\r\n    if (!parsed) return { valid: false };\r\n    return { valid: parsed.isValid(), e164: parsed.number };\r\n  } catch (err) {\r\n    // Fallback: simple digit-only length check (not as accurate)\r\n    const digits = (full || '').replace(/\\D/g, '');\r\n    if (digits.length < 7 || digits.length > 15) return { valid: false };\r\n    return { valid: true, e164: '+' + digits };\r\n  }\r\n}\r\n\r\n// Named export only — avoids anonymous default export lint warnings\r\n"],"mappings":"AAAA,OAAO,eAAeA,aAAaA,CAACC,WAAW,EAAEC,cAAc,EAAE;EAC/D;EACA,IAAI,CAACA,cAAc,EAAE,OAAO;IAAEC,KAAK,EAAE;EAAM,CAAC;EAE5C,IAAIC,SAAS,GAAGC,MAAM,CAACH,cAAc,IAAI,EAAE,CAAC,CAACI,IAAI,CAAC,CAAC;EACnD;EACA,IAAIF,SAAS,CAACG,UAAU,CAAC,IAAI,CAAC,EAAEH,SAAS,GAAG,GAAG,GAAGA,SAAS,CAACI,KAAK,CAAC,CAAC,CAAC;;EAEpE;EACA,IAAIC,IAAI;EACR,IAAIL,SAAS,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;IAC7BE,IAAI,GAAGL,SAAS;EAClB,CAAC,MAAM;IACL;IACA,MAAMM,EAAE,GAAGL,MAAM,CAACJ,WAAW,IAAI,EAAE,CAAC,CAACK,IAAI,CAAC,CAAC;IAC3C,MAAMK,QAAQ,GAAGD,EAAE,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IACtC;IACA,IAAIC,MAAM,GAAGT,SAAS,CAACQ,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IACzCC,MAAM,GAAGA,MAAM,CAACD,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAElC,IAAID,QAAQ,IAAIE,MAAM,CAACN,UAAU,CAACI,QAAQ,CAAC,EAAE;MAC3C;MACAF,IAAI,GAAG,GAAG,GAAGI,MAAM;IACrB,CAAC,MAAM;MACLJ,IAAI,GAAG,CAACC,EAAE,CAACH,UAAU,CAAC,GAAG,CAAC,GAAGG,EAAE,GAAIC,QAAQ,GAAG,GAAG,GAAGA,QAAQ,GAAG,GAAI,IAAIE,MAAM;IAC/E;EACF;EAEA,IAAI;IACF,MAAMC,GAAG,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAAC;IAC7C,MAAM;MAAEC;IAA2B,CAAC,GAAGD,GAAG;IAC1C,MAAME,MAAM,GAAGD,0BAA0B,CAACN,IAAI,CAAC;IAC/C,IAAI,CAACO,MAAM,EAAE,OAAO;MAAEb,KAAK,EAAE;IAAM,CAAC;IACpC,OAAO;MAAEA,KAAK,EAAEa,MAAM,CAACC,OAAO,CAAC,CAAC;MAAEC,IAAI,EAAEF,MAAM,CAACG;IAAO,CAAC;EACzD,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ;IACA,MAAMP,MAAM,GAAG,CAACJ,IAAI,IAAI,EAAE,EAAEG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC9C,IAAIC,MAAM,CAACQ,MAAM,GAAG,CAAC,IAAIR,MAAM,CAACQ,MAAM,GAAG,EAAE,EAAE,OAAO;MAAElB,KAAK,EAAE;IAAM,CAAC;IACpE,OAAO;MAAEA,KAAK,EAAE,IAAI;MAAEe,IAAI,EAAE,GAAG,GAAGL;IAAO,CAAC;EAC5C;AACF;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}