{"ast":null,"code":"import { parsePhoneNumberFromString } from 'libphonenumber-js';\nexport function validatePhone(countryCode, nationalNumber) {\n  // countryCode like +63, nationalNumber like 9123456789\n  try {\n    // create a full number string\n    const full = `${countryCode}${nationalNumber}`;\n    const parsed = parsePhoneNumberFromString(full);\n    if (!parsed) return {\n      valid: false\n    };\n    return {\n      valid: parsed.isValid(),\n      e164: parsed.number\n    };\n  } catch (err) {\n    return {\n      valid: false\n    };\n  }\n}\nexport default {\n  validatePhone\n};","map":{"version":3,"names":["parsePhoneNumberFromString","validatePhone","countryCode","nationalNumber","full","parsed","valid","isValid","e164","number","err"],"sources":["C:/WorkConnect/WorkConnect/frontend/src/utils/phone.js"],"sourcesContent":["import { parsePhoneNumberFromString } from 'libphonenumber-js'\r\n\r\nexport function validatePhone(countryCode, nationalNumber) {\r\n  // countryCode like +63, nationalNumber like 9123456789\r\n  try {\r\n    // create a full number string\r\n    const full = `${countryCode}${nationalNumber}`;\r\n    const parsed = parsePhoneNumberFromString(full);\r\n    if (!parsed) return { valid: false };\r\n    return { valid: parsed.isValid(), e164: parsed.number };\r\n  } catch (err) {\r\n    return { valid: false };\r\n  }\r\n}\r\n\r\nexport default { validatePhone };\r\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,mBAAmB;AAE9D,OAAO,SAASC,aAAaA,CAACC,WAAW,EAAEC,cAAc,EAAE;EACzD;EACA,IAAI;IACF;IACA,MAAMC,IAAI,GAAG,GAAGF,WAAW,GAAGC,cAAc,EAAE;IAC9C,MAAME,MAAM,GAAGL,0BAA0B,CAACI,IAAI,CAAC;IAC/C,IAAI,CAACC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAM,CAAC;IACpC,OAAO;MAAEA,KAAK,EAAED,MAAM,CAACE,OAAO,CAAC,CAAC;MAAEC,IAAI,EAAEH,MAAM,CAACI;IAAO,CAAC;EACzD,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,OAAO;MAAEJ,KAAK,EAAE;IAAM,CAAC;EACzB;AACF;AAEA,eAAe;EAAEL;AAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}