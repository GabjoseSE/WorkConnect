{"ast":null,"code":"export async function validatePhone(countryCode,nationalNumber){// countryCode like +63, nationalNumber like 9123456789 or +639912345678\nif(!nationalNumber)return{valid:false};let candidate=String(nationalNumber||'').trim();// handle leading 00 -> +\nif(candidate.startsWith('00'))candidate='+'+candidate.slice(2);// build a full E.164 candidate\nlet full;if(candidate.startsWith('+')){full=candidate;}else{// normalize country code digits\nconst cc=String(countryCode||'').trim();const ccDigits=cc.replace(/\\D/g,'');// strip non-digits from candidate and leading zeros\nlet digits=candidate.replace(/\\D/g,'');digits=digits.replace(/^0+/,'');if(ccDigits&&digits.startsWith(ccDigits)){// user may have entered country code without +\nfull='+'+digits;}else{full=(cc.startsWith('+')?cc:ccDigits?'+'+ccDigits:'+')+digits;}}try{const lib=await import('libphonenumber-js');const{parsePhoneNumberFromString}=lib;const parsed=parsePhoneNumberFromString(full);if(!parsed)return{valid:false};return{valid:parsed.isValid(),e164:parsed.number};}catch(err){// Fallback: simple digit-only length check (not as accurate)\nconst digits=(full||'').replace(/\\D/g,'');if(digits.length<7||digits.length>15)return{valid:false};return{valid:true,e164:'+'+digits};}}// Named export only — avoids anonymous default export lint warnings","map":{"version":3,"names":["validatePhone","countryCode","nationalNumber","valid","candidate","String","trim","startsWith","slice","full","cc","ccDigits","replace","digits","lib","parsePhoneNumberFromString","parsed","isValid","e164","number","err","length"],"sources":["C:/WorkConnect/WorkConnect/frontend/src/utils/phone.js"],"sourcesContent":["export async function validatePhone(countryCode, nationalNumber) {\r\n  // countryCode like +63, nationalNumber like 9123456789 or +639912345678\r\n  if (!nationalNumber) return { valid: false };\r\n\r\n  let candidate = String(nationalNumber || '').trim();\r\n  // handle leading 00 -> +\r\n  if (candidate.startsWith('00')) candidate = '+' + candidate.slice(2);\r\n\r\n  // build a full E.164 candidate\r\n  let full;\r\n  if (candidate.startsWith('+')) {\r\n    full = candidate;\r\n  } else {\r\n    // normalize country code digits\r\n    const cc = String(countryCode || '').trim();\r\n    const ccDigits = cc.replace(/\\D/g, '');\r\n    // strip non-digits from candidate and leading zeros\r\n    let digits = candidate.replace(/\\D/g, '');\r\n    digits = digits.replace(/^0+/, '');\r\n\r\n    if (ccDigits && digits.startsWith(ccDigits)) {\r\n      // user may have entered country code without +\r\n      full = '+' + digits;\r\n    } else {\r\n      full = (cc.startsWith('+') ? cc : (ccDigits ? '+' + ccDigits : '+')) + digits;\r\n    }\r\n  }\r\n\r\n  try {\r\n    const lib = await import('libphonenumber-js');\r\n    const { parsePhoneNumberFromString } = lib;\r\n    const parsed = parsePhoneNumberFromString(full);\r\n    if (!parsed) return { valid: false };\r\n    return { valid: parsed.isValid(), e164: parsed.number };\r\n  } catch (err) {\r\n    // Fallback: simple digit-only length check (not as accurate)\r\n    const digits = (full || '').replace(/\\D/g, '');\r\n    if (digits.length < 7 || digits.length > 15) return { valid: false };\r\n    return { valid: true, e164: '+' + digits };\r\n  }\r\n}\r\n\r\n// Named export only — avoids anonymous default export lint warnings\r\n"],"mappings":"AAAA,MAAO,eAAe,CAAAA,aAAaA,CAACC,WAAW,CAAEC,cAAc,CAAE,CAC/D;AACA,GAAI,CAACA,cAAc,CAAE,MAAO,CAAEC,KAAK,CAAE,KAAM,CAAC,CAE5C,GAAI,CAAAC,SAAS,CAAGC,MAAM,CAACH,cAAc,EAAI,EAAE,CAAC,CAACI,IAAI,CAAC,CAAC,CACnD;AACA,GAAIF,SAAS,CAACG,UAAU,CAAC,IAAI,CAAC,CAAEH,SAAS,CAAG,GAAG,CAAGA,SAAS,CAACI,KAAK,CAAC,CAAC,CAAC,CAEpE;AACA,GAAI,CAAAC,IAAI,CACR,GAAIL,SAAS,CAACG,UAAU,CAAC,GAAG,CAAC,CAAE,CAC7BE,IAAI,CAAGL,SAAS,CAClB,CAAC,IAAM,CACL;AACA,KAAM,CAAAM,EAAE,CAAGL,MAAM,CAACJ,WAAW,EAAI,EAAE,CAAC,CAACK,IAAI,CAAC,CAAC,CAC3C,KAAM,CAAAK,QAAQ,CAAGD,EAAE,CAACE,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CACtC;AACA,GAAI,CAAAC,MAAM,CAAGT,SAAS,CAACQ,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CACzCC,MAAM,CAAGA,MAAM,CAACD,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAElC,GAAID,QAAQ,EAAIE,MAAM,CAACN,UAAU,CAACI,QAAQ,CAAC,CAAE,CAC3C;AACAF,IAAI,CAAG,GAAG,CAAGI,MAAM,CACrB,CAAC,IAAM,CACLJ,IAAI,CAAG,CAACC,EAAE,CAACH,UAAU,CAAC,GAAG,CAAC,CAAGG,EAAE,CAAIC,QAAQ,CAAG,GAAG,CAAGA,QAAQ,CAAG,GAAI,EAAIE,MAAM,CAC/E,CACF,CAEA,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,OAAM,CAAC,mBAAmB,CAAC,CAC7C,KAAM,CAAEC,0BAA2B,CAAC,CAAGD,GAAG,CAC1C,KAAM,CAAAE,MAAM,CAAGD,0BAA0B,CAACN,IAAI,CAAC,CAC/C,GAAI,CAACO,MAAM,CAAE,MAAO,CAAEb,KAAK,CAAE,KAAM,CAAC,CACpC,MAAO,CAAEA,KAAK,CAAEa,MAAM,CAACC,OAAO,CAAC,CAAC,CAAEC,IAAI,CAAEF,MAAM,CAACG,MAAO,CAAC,CACzD,CAAE,MAAOC,GAAG,CAAE,CACZ;AACA,KAAM,CAAAP,MAAM,CAAG,CAACJ,IAAI,EAAI,EAAE,EAAEG,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAC9C,GAAIC,MAAM,CAACQ,MAAM,CAAG,CAAC,EAAIR,MAAM,CAACQ,MAAM,CAAG,EAAE,CAAE,MAAO,CAAElB,KAAK,CAAE,KAAM,CAAC,CACpE,MAAO,CAAEA,KAAK,CAAE,IAAI,CAAEe,IAAI,CAAE,GAAG,CAAGL,MAAO,CAAC,CAC5C,CACF,CAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}