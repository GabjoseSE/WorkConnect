{"ast":null,"code":"var _jsxFileName = \"C:\\\\WorkConnect\\\\WorkConnect\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { login as apiLogin } from '../api/auth';\nimport { getOwnProfile as apiGetOwnProfile } from '../api/profile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [token, setToken] = useState(() => localStorage.getItem('wc_token'));\n  const [userId, setUserId] = useState(() => localStorage.getItem('wc_userId'));\n  const [profile, setProfile] = useState(() => {\n    try {\n      return JSON.parse(localStorage.getItem('wc_profile')) || null;\n    } catch (e) {\n      return null;\n    }\n  });\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('wc_token', token);\n    } else {\n      localStorage.removeItem('wc_token');\n    }\n  }, [token]);\n  useEffect(() => {\n    if (userId) localStorage.setItem('wc_userId', userId);else localStorage.removeItem('wc_userId');\n  }, [userId]);\n  useEffect(() => {\n    if (profile) localStorage.setItem('wc_profile', JSON.stringify(profile));else localStorage.removeItem('wc_profile');\n  }, [profile]);\n\n  // login with email/password, store token and fetch profile\n  const login = async (email, password) => {\n    const res = await apiLogin({\n      email,\n      password\n    });\n    if (!res || !res.token) throw new Error('Login failed');\n    setToken(res.token);\n    setUserId(res.userId);\n    // fetch profile and store (pass userId to support in-memory dev fallback)\n    try {\n      const p = await apiGetOwnProfile(res.token, res.userId);\n      setProfile(p);\n      // return profile to caller so they can act immediately\n      return {\n        ...res,\n        profile: p\n      };\n    } catch (err) {\n      // ignore; profile can be created later\n      console.warn('Failed to fetch profile after login', err);\n      return res;\n    }\n  };\n\n  // if token exists (e.g. page reload) and we don't have profile, try to fetch it\n  useEffect(() => {\n    let cancelled = false;\n    async function fetchProfile() {\n      if (!token || profile) return;\n      try {\n        const p = await apiGetOwnProfile(token, userId);\n        if (!cancelled) setProfile(p);\n      } catch (err) {\n        console.warn('Failed to fetch profile on load', err);\n      }\n    }\n    fetchProfile();\n    return () => {\n      cancelled = true;\n    };\n  }, [token, userId, profile]);\n  const logout = () => {\n    setToken(null);\n    setUserId(null);\n    setProfile(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      token,\n      userId,\n      profile,\n      setProfile,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"GDeTunXFbzmMyl7O/VxiZj+MoTU=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error('useAuth must be used inside AuthProvider');\n  return ctx;\n}\n_s2(useAuth, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","login","apiLogin","getOwnProfile","apiGetOwnProfile","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","token","setToken","localStorage","getItem","userId","setUserId","profile","setProfile","JSON","parse","e","setItem","removeItem","stringify","email","password","res","Error","p","err","console","warn","cancelled","fetchProfile","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","ctx","$RefreshReg$"],"sources":["C:/WorkConnect/WorkConnect/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { login as apiLogin } from '../api/auth';\r\nimport { getOwnProfile as apiGetOwnProfile } from '../api/profile';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [token, setToken] = useState(() => localStorage.getItem('wc_token'));\r\n  const [userId, setUserId] = useState(() => localStorage.getItem('wc_userId'));\r\n  const [profile, setProfile] = useState(() => {\r\n    try {\r\n      return JSON.parse(localStorage.getItem('wc_profile')) || null;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      localStorage.setItem('wc_token', token);\r\n    } else {\r\n      localStorage.removeItem('wc_token');\r\n    }\r\n  }, [token]);\r\n\r\n  useEffect(() => {\r\n    if (userId) localStorage.setItem('wc_userId', userId);\r\n    else localStorage.removeItem('wc_userId');\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    if (profile) localStorage.setItem('wc_profile', JSON.stringify(profile));\r\n    else localStorage.removeItem('wc_profile');\r\n  }, [profile]);\r\n\r\n  // login with email/password, store token and fetch profile\r\n  const login = async (email, password) => {\r\n    const res = await apiLogin({ email, password });\r\n    if (!res || !res.token) throw new Error('Login failed');\r\n    setToken(res.token);\r\n    setUserId(res.userId);\r\n    // fetch profile and store (pass userId to support in-memory dev fallback)\r\n    try {\r\n      const p = await apiGetOwnProfile(res.token, res.userId);\r\n      setProfile(p);\r\n      // return profile to caller so they can act immediately\r\n      return { ...res, profile: p };\r\n    } catch (err) {\r\n      // ignore; profile can be created later\r\n      console.warn('Failed to fetch profile after login', err);\r\n      return res;\r\n    }\r\n  };\r\n\r\n  // if token exists (e.g. page reload) and we don't have profile, try to fetch it\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    async function fetchProfile() {\r\n      if (!token || profile) return;\r\n      try {\r\n        const p = await apiGetOwnProfile(token, userId);\r\n        if (!cancelled) setProfile(p);\r\n      } catch (err) {\r\n        console.warn('Failed to fetch profile on load', err);\r\n      }\r\n    }\r\n    fetchProfile();\r\n    return () => { cancelled = true; };\r\n  }, [token, userId, profile]);\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUserId(null);\r\n    setProfile(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ token, userId, profile, setProfile, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  const ctx = useContext(AuthContext);\r\n  if (!ctx) throw new Error('useAuth must be used inside AuthProvider');\r\n  return ctx;\r\n}\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}